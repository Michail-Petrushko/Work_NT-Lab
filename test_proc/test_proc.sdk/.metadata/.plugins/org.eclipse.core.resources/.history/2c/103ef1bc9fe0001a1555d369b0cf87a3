/*
 * LED_test.c
 *
 *  Created on: 	2020
 *      Author:
 *     Version:		1.2
 */

/********************************************************************************************
* VERSION HISTORY
********************************************************************************************
* 	Fuck this shit ;)
*******************************************************************************************/

/* Include Files */
#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xil_printf.h"

/* Definitions */
#define GPIO_BTNS  XPAR_AXI_GPIO_BTNS_DEVICE_ID
#define GPIO_SWS  XPAR_AXI_GPIO_SWS_DEVICE_ID
#define GPIO_LEDS  XPAR_AXI_GPIO_LEDS_DEVICE_ID

#define LED_DELAY 1000								/* Software delay length */

#define CHANNEL_INPUT 1								/* GPIO port INPUT */
#define CHANNEL_OUTPUT 2							/* GPIO port OUTPUT */

#define printf xil_printf							/* smaller, optimised printf */

XGpio Gpio;											/* GPIO Device driver instance */

void LEDs(int data)
{

	int Status;


		/* GPIO driver initialisation for LEDs */
		Status = XGpio_Initialize(&Gpio, GPIO_LEDS_IN_OUT);

		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

		XGpio_SetDataDirection(&Gpio, CHANNEL_OUTPUT, 0x0);			//set output channel

		XGpio_DiscreteWrite(&Gpio, 1, data);			//write data
}

int BTNs()
{

	int Status;
	int data = 0;

		/* GPIO driver initialisation for Buttons */
		Status = XGpio_Initialize(&Gpio, GPIO_BTNS_IN_OUT);

		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

		XGpio_SetDataDirection(&Gpio, CHANNEL_INPUT, 0x1);			//set input channel

		data = XGpio_DiscreteRead(&Gpio, CHANNEL_INPUT);			//read data
		return data;

}



int SWs()
{

	int Status;
	int data = 0;

		/* GPIO driver initialisation for Switches */
		Status = XGpio_Initialize(&Gpio, GPIO_SW_IN_OUT);

		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

		XGpio_SetDataDirection(&Gpio, CHANNEL_INPUT, 0x1);			//set input channel

		data = XGpio_DiscreteRead(&Gpio, CHANNEL_INPUT);			//read data

		return data;
}



/* Main function. */
int main(void){

	//volatile int Delay;

	while (1) {

		SWInOut();
		BTNsInOut();
		LEDsInOut();
		RGBInOut();

		//for (Delay = 0; Delay < LED_DELAY; Delay++);		// on/off delay
		}

	return 0;
}

