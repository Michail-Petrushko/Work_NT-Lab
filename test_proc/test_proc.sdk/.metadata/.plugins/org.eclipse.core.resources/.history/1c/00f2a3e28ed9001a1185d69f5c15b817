/*
 * LED_test.c
 *
 *  Created on: 	13 June 2013
 *      Author: 	Ross Elliot
 *     Version:		1.2
 */

/********************************************************************************************
* VERSION HISTORY
********************************************************************************************
* 	v1.2 - 13 February 2015
* 		Modified for Zybo Development Board ~ DN
*
* 	v1.1 - 27 January 2014
* 		GPIO_DEVICE_ID definition updated to reflect new naming conventions in Vivado 2013.3
*		onwards.
*
*	v1.0 - 13 June 2013
*		First version created.
*******************************************************************************************/

/* Include Files */
#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xil_printf.h"

/* Definitions */
#define GPIO_BTNS_IN_OUT  XPAR_AXI_GPIO_BTNS_IN_OUT_DEVICE_ID
#define GPIO_SW_IN_OUT  XPAR_AXI_GPIO_SW_IN_OUT_DEVICE_ID
#define GPIO_RGB_IN_OUT  XPAR_AXI_GPIO_RGB_IN_OUT_DEVICE_ID
#define GPIO_LEDS_IN_OUT  XPAR_AXI_GPIO_LEDS_IN_OUT_DEVICE_ID

#define LED_DELAY 1000							/* Software delay length */
#define CHANNEL_INPUT 1								/* GPIO port INPUT */
#define CHANNEL_OUTPUT 2								/* GPIO port OUTPUT */

#define printf xil_printf							/* smaller, optimised printf */

XGpio Gpio;											/* GPIO Device driver instance */

void LEDsInOut()
{

	int Status;
	int data = 0;


		/* GPIO driver initialisation */
		Status = XGpio_Initialize(&Gpio, GPIO_LEDS_IN_OUT);

		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

		XGpio_SetDataDirection(&Gpio, CHANNEL_INPUT, 0x1);

		data = XGpio_DiscreteRead(&Gpio, CHANNEL_INPUT);

		/*Set the direction for the LEDs to output. */
		XGpio_SetDataDirection(&Gpio, CHANNEL_OUTPUT, 0x0);

		/* Write output to the LEDs. */
		XGpio_DiscreteWrite(&Gpio, CHANNEL_OUTPUT, data);
}

void BTNsInOut()
{

	int Status;
	int data = 0; /* Hold current LED value. Initialise to LED definition */

		/* GPIO driver initialisation */
		Status = XGpio_Initialize(&Gpio, GPIO_BTNS_IN_OUT);

		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

		XGpio_SetDataDirection(&Gpio, CHANNEL_INPUT, 0x1);

		data = XGpio_DiscreteRead(&Gpio, CHANNEL_INPUT);

		XGpio_SetDataDirection(&Gpio, CHANNEL_OUTPUT, 0x0);

		XGpio_DiscreteWrite(&Gpio, CHANNEL_OUTPUT, data);

}



void SWInOut()
{

	int Status;
	int data = 0; /* Hold current LED value. Initialise to LED definition */

		/* GPIO driver initialisation */
		Status = XGpio_Initialize(&Gpio, GPIO_SW_IN_OUT);

		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

		XGpio_SetDataDirection(&Gpio, CHANNEL_INPUT, 0x1);

		data = XGpio_DiscreteRead(&Gpio, CHANNEL_INPUT);

		XGpio_SetDataDirection(&Gpio, CHANNEL_OUTPUT, 0x0);

		XGpio_DiscreteWrite(&Gpio, CHANNEL_OUTPUT, data);
}



void RGBInOut()
{

	int Status;
	int data = 0; /* Hold current LED value. Initialise to LED definition */

		/* GPIO driver initialisation */
		Status = XGpio_Initialize(&Gpio, GPIO_RGB_IN_OUT);

		if (Status != XST_SUCCESS) {
			return XST_FAILURE;
		}

		XGpio_SetDataDirection(&Gpio, CHANNEL_INPUT, 0x1);

		data = XGpio_DiscreteRead(&Gpio, CHANNEL_INPUT);

		XGpio_SetDataDirection(&Gpio, CHANNEL_OUTPUT, 0x0);

		XGpio_DiscreteWrite(&Gpio, CHANNEL_OUTPUT, data);
}






/* Main function. */
int main(void){


	/* Execute the LED output. */
	LEDsOutput(3); // change 3 on integer

	int btns_data, leds_data, rgb_data, sw_data;

	//volatile int Delay;

	while (1) {

		SWInOut();
		BTNsInOut();
		LEDsInOut();
		RGBInOut();
		//for (Delay = 0; Delay < LED_DELAY; Delay++);
		}



	return 0;
}

